version: "3"

services:
  # consul stores information about services and 
  # also does health checks defined in SERVICE_CHECK_SCRIPT below
  consul:
    image: gliderlabs/consul-server:latest
    container_name: consul
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
      - "8600:53/udp"
    environment:
      SERVICE_8300_IGNORE: 'yes'
      SERVICE_8400_IGNORE: 'yes'
      SERVICE_8500_IGNORE: 'yes'
      SERVICE_8600_IGNORE: 'yes'
      CONSUL_LOCAL_CONFIG: '{"skip_leave_on_interrupt": true}'
    command: -server -log-level=warn -bootstrap -dev -ui -advertise 127.0.0.1
  
  # registrator adds new launched containers to the consul
  registrator:
    command: -ip $HOSTNAME consul://consul:8500 
    image: gliderlabs/registrator:latest
    container_name: registrator
    environment:
      HOSTNAME: $HOSTNAME
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    links:
      - consul

  # fabio routs requests to containers registered in consul
  # it needs to talk to consul so it can up to date routing  
  fabio:
    image: magiconair/fabio:latest
    ports:
      - "9999:9999"
      - "9998:9998"
    links:
      - consul
    volumes:
      - "./fabio.properties:/etc/fabio/fabio.properties"
    environment:
      - SERVICE_9999_IGNORE=yes
      - SERVICE_9998_IGNORE=yes

  backend-app:
   image: dockercloud/hello-world
   ports:
     - 80
   environment:
     SERVICE_80_TAGS: urlprefix-/v1/hello
     SERVICE_CHECK_SCRIPT: "curl --silent --fail $HOSTNAME:$$SERVICE_PORT"

  whoami-app:
    image: emilevauge/whoami
    ports:
      - 80 
    environment:
      SERVICE_80_TAGS: urlprefix-/v1/whoami
      SERVICE_CHECK_SCRIPT: "curl --silent --fail $HOSTNAME:$$SERVICE_PORT"
